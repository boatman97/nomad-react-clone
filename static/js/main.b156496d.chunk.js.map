{"version":3,"sources":["logo.svg","Movie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MoviePoster","poster","alt","className","src","title","MovieGenere","genre","Movie","title_english","medium_cover_image","genres","synopsis","map","index","key","text","maxLine","ellipsis","trimRight","basedOn","App","state","__getMoives","a","__callApi","movies","setState","fetch","then","response","json","result","data","catch","err","console","log","_renderMoives","movie","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,6MCmE3C,SAASC,EAAT,GAAoC,IAAdC,EAAa,EAAbA,OAAQC,EAAK,EAALA,IAC5B,OACE,yBAAKC,UAAU,gBAAgBC,IAAKH,EAAQC,IAAKA,EAAKG,MAAOH,IAIjE,SAASI,EAAT,GAA8B,IAARC,EAAO,EAAPA,MACpB,OACE,0BAAMJ,UAAU,eAAeI,EAA/B,KAiBWC,MAlDf,YAAmE,IAAnDC,EAAkD,EAAlDA,cAAcC,EAAoC,EAApCA,mBAAmBC,EAAiB,EAAjBA,OAAOC,EAAU,EAAVA,SACtD,OACE,yBAAKT,UAAY,SACf,yBAAKA,UAAW,iBACd,kBAACH,EAAD,CAAaC,OAAQS,EAAoBR,IAAKO,KAEhD,yBAAKN,UAAW,iBACd,4BAAKM,GACL,yBAAKN,UAAU,iBACZQ,EAAOE,KAAI,SAACN,EAAMO,GAAP,OAAiB,kBAACR,EAAD,CAAaC,MAAOA,EAAOQ,IAAMD,QAEhE,uBAAGX,UAAU,mBACX,kBAAC,IAAD,CACEa,KAAMJ,EACNK,QAAQ,IACRC,SAAS,OACTC,WAAS,EACTC,QAAQ,gBCyBLC,E,4MAzEXC,MAAQ,G,EASVC,Y,sBAAc,4BAAAC,EAAA,sEACS,EAAKC,YADd,OACNC,EADM,OAEZ,EAAKC,SAAS,CACZD,WAHU,2C,EAOdD,UAAY,WAEV,OAAOG,MAAM,+EACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,KAAKP,UAC3BQ,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EA4B5BG,cAAgB,WASd,OARe,EAAKhB,MAAMI,OAAOb,KAAK,SAAC0B,EAAOzB,GAC5C,OAAO,kBAAC,EAAD,CACLC,IAAOD,EACPL,cAAe8B,EAAM9B,cACrBC,mBAAoB6B,EAAM7B,mBAC1BC,OAAU4B,EAAM5B,OAChBC,SAAY2B,EAAM3B,e,kEAnDtB4B,KAAKjB,gB,+BAyDH,OACE,yBAAKpB,UAAU,OAEZqC,KAAKlB,MAAMI,OAASc,KAAKF,gBAAkB,sB,GApEpCG,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.b156496d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css'\r\n\r\n// class Movie extends Component{\r\n//\r\n//   // 데이터 타입 유효성 검사\r\n//   static propTypes = {\r\n//     title_english: PropTypes.string.isRequired,\r\n//     small_cover_image: PropTypes.string.isRequired\r\n//   }\r\n//\r\n//   render(){\r\n//     return(\r\n//       <div>\r\n//         <Moviesmall_cover_image small_cover_image={this.props.small_cover_image}/>\r\n//         <h1> {this.key}.{this.props.title_english} </h1>\r\n//       </div>\r\n//   )\r\n//   }\r\n// }\r\n\r\n\r\n// class Moviesmall_cover_image extends Component{\r\n//\r\n//   static propTypes = {\r\n//     small_cover_image: PropTypes.string.isRequired\r\n//   }\r\n//\r\n//   render(){\r\n//     return(\r\n//       <img src={this.props.small_cover_image} />\r\n//     )\r\n//   }\r\n// }\r\n\r\n\r\n// dumb component , no Life Cycle\r\n// nocomponetWill mout .. 등\r\n//\r\n\r\nfunction Movie({title_english,medium_cover_image,genres,synopsis}){\r\n  return(\r\n    <div className = \"Movie\">\r\n      <div className =\"Movie__Column\">\r\n        <MoviePoster poster={medium_cover_image} alt={title_english}/>\r\n      </div>\r\n      <div className =\"Movie__Column\">\r\n        <h1>{title_english}</h1>\r\n        <div className=\"Movie__Genres\">\r\n          {genres.map((genre,index) => <MovieGenere genre={genre} key ={index} /> )}\r\n        </div>\r\n        <p className=\"Movie__Synopsis\">\r\n          <LinesEllipsis\r\n            text={synopsis}\r\n            maxLine='3'\r\n            ellipsis='....'\r\n            trimRight\r\n            basedOn='letters'\r\n          />\r\n        </p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}){\r\n  return(\r\n    <img className=\"Movie__Poster\" src={poster} alt={alt} title={alt} />\r\n  )\r\n}\r\n\r\nfunction MovieGenere({genre}){\r\n  return(\r\n    <span className=\"MovieGenere\">{genre} </span>\r\n  )\r\n}\r\n\r\n\r\nMovie.propTypes = {\r\n  title_english: PropTypes.string.isRequired,\r\n  medium_cover_image: PropTypes.string.isRequired,\r\n  genres : PropTypes.array.isRequired,\r\n  synopsis : PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n  poster : PropTypes.string.isRequired,\r\n  alt:PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;\r\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Movie from './Movie';\n\n\n\n\nclass App extends Component {\n\n\n    state = {\n    }\n\n  // redner 이후 fetch를 통해 ajax\n  componentDidMount(){\n    this.__getMoives();\n  }\n\n\n  __getMoives = async () => {\n    const movies = await this.__callApi();\n    this.setState({\n      movies\n    })\n  }\n\n  __callApi = () => {\n    // fetch -> then -> catch\n    return fetch(\"https://yts.mx/api/v2/list_movies.json?quality=3D&sort_by=download_count%22\")\n    .then(response => response.json())\n    .then(result => result.data.movies)\n    .catch(err => console.log(err))\n  }\n  // componentDidMount(){\n  //   setTimeout(()=>{\n  //     this.setState({\n  //\n  //\n  //       // movies:[\n  //       //   // ...this.state.movies,\n  //       //   {\n  //       //     title_english:\"IronMan2\",\n  //       //     small_cover_image : \"https://i.ytimg.com/vi/samguP3K3rg/maxresdefault.jpg\"\n  //       //   }\n  //       //  ]\n  //     })\n  //   }, 1000)\n  //   // setTimeout( () => {\n  //   //   this.setState({\n  //   //     greeting : \"Hello again!\"\n  //   //   })\n  //   // }, 5000)\n  // }\n\n  // 컴포넌트 render 이후 데이터 수정 및 추가하는 과정\n  // setState는 기존에 key값이 없어도 된다.\n  // 모든 컴포넌트에 state가 존재하지 안흔다.\n  // dumb : no state component => function component 로 작성, smart: state component\n\n  _renderMoives = () => {\n    const moives = this.state.movies.map( (movie, index) =>{\n      return <Movie\n        key = {index}\n        title_english={movie.title_english}\n        medium_cover_image={movie.medium_cover_image}\n        genres = {movie.genres}\n        synopsis = {movie.synopsis} />\n    })\n    return moives\n  }\n\n  render(){\n      return (\n        <div className=\"App\">\n          {/*  1. state key값 확인*/ }\n          {this.state.movies ? this._renderMoives() : \"Now ..Loading!\"}\n        </div>\n      );\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}